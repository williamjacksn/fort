name: Publish the release package to PyPI

on:
  release:
    types:
      - published

jobs:

  publish:
    name: Publish the release package to PyPI
    runs-on: ubuntu-latest
    steps:

      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Build the package
        run: docker compose run --no-TTY --user="$(id -u):$(id -g)" py-build

      - name: Publish the package to PyPI
        run: docker compose run --no-TTY twine-upload
        env:
          TWINE_PASSWORD: ${{ secrets.twine_password }}
          TWINE_USERNAME: ${{ secrets.twine_username }}

      - name: Get file names
        id: files
        run: |
          echo "SDIST=$(cd dist && ls *.gz)" >> $GITHUB_OUTPUT
          echo "WHEEL=$(cd dist && ls *.whl)" >> $GITHUB_OUTPUT

      - name: Upload release assets
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('node:fs/promises');
            const repo = '${{ github.repository }}'.split('/')[1]

            const sdist_data = await fs.readFile('${{ github.workspace }}/dist/${{ steps.files.outputs.SDIST }}');
            await github.rest.repos.uploadReleaseAsset({
              owner: '${{ github.repository_owner }}',
              repo: repo,
              release_id: '${{ github.event.release.id }}',
              name: '${{ steps.files.outputs.SDIST }}',
              data: sdist_data
            });

            const wheel_data = await fs.readFile('${{ github.workspace }}/dist/${{ steps.files.outputs.WHEEL }}');
            await github.rest.repos.uploadReleaseAsset({
              owner: '${{ github.repository_owner }}',
              repo: repo,
              release_id: '${{ github.event.release.id }}',
              name: '${{ steps.files.outputs.WHEEL }}',
              data: wheel_data
            });
